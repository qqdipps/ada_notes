Object Orientation: Overview


  https://github.com/Ada-Developers-Academy/textbook-curriculum/blob/master/01-ruby-fundamentals/classes-overview.md


  Learning Goals
    √ Describe the role that classes fill in Ruby
    √ Differentiate between classes and instances
    √ Identify the state and behavior of an object 

  VOCAB  
    - Objects are used to tie together state and behavior. 
    - synatical suger for creating common classes-> "", [], {} 
    Term	Definition	Examples                                          
      - Object	A representation of an idea within a program. Ties together state (variables) and behavior (methods).	A number, an array, any instance of a class
      - Class	A type of object. A class is abstract in that it defines what those objects will look like, but doesn't itself have state.	Array, Time
      - Instance	One particular object. Follows the format defined by its class, but has state that makes it specific.	[1, 2, 3], Time.new(2017, 'jul', 29)
      - State	Data or attributes an object will keep track of	The elements of an array, the days and years stored in a Time object
      - Behavior	Methods that rely upon or modify state	Array#sort, Time#friday?  


Object Orientation: Classes in Ruby  
  https://github.com/Ada-Developers-Academy/textbook-curriculum/blob/master/01-ruby-fundamentals/classes-in-ruby.md
  Learning Goals
    √ Define, instantiate and use a Ruby class
    √ Store object state using instance variables
    √ Define object behavior using instance methods

  Classes Vocabulary
    Term	Definition	Example                                          
    Object	A programming concept that ties together state (variables) and behavior (methods).	
    Class	Definition of what an object looks like, using Ruby's class keyword. The first letter is always capitalized.	class User
    Instance	One particular object. Built using a class's new method.	ada = User.new
    Instance Variable	A variable attached to a particular instance of a class. Also known as an attribute. Always begins with an @. Not visible outside that class.	@name
    Instance Method	A method attached to a particular instance of a class. Often relies on or modifies instance variables. Can be invoked from outside that class using . notation.	def summary()
    Constructor	A special instance method that is called automatically when a new instance of a class is created. Takes care of any initial setup. Any arguments passed to new will be passed to the constructor.	def initialize(name, email)
    Reader Method	Instance method that returns the value of an instance variable. Also known as a getter or accessor.	def email
        return @email
    end
    Writer Method	Instance method that sets the value of an instance variable. Also known as a setter or mutator.	def email=(new_email)
        @email=new_email
    end

Classes Part 2: Helper Methods and Self
  https://github.com/Ada-Developers-Academy/textbook-curriculum/blob/master/01-ruby-fundamentals/classes-part-2.md

  Learning Goals
    √ DRY up repeated code using helper methods
    √ Use Ruby's self keyword to refer to the current object