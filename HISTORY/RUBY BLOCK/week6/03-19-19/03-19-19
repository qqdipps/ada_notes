Testing APIs
  https://github.com/Ada-Developers-Academy/textbook-curriculum/blob/master/02-intermediate-ruby/api-testing-vcr.md
  
  Identify the areas of APIs that we want to test
  Utilize VCR to snapshot API calls -> MOCKING API 
  Integrate tests

    Configuire: 
      In your `spec_helper.rb` file, add the following code:
      require "minitest/autorun"
      require "minitest/reporters"
      require "vcr"
      require "webmock/minitest"
      require "dotenv"
      Dotenv.load

      require_relative "../lib/location_search"

      Minitest::Reporters.use! Minitest::Reporters::SpecReporter.new

      VCR.configure do |config|
        config.cassette_library_dir = "specs/cassettes" # folder where casettes will be located
        config.hook_into :webmock # tie into this other tool called webmock
        config.default_cassette_options = {
          :record => :new_episodes,    # record new data when we don't have it yet
          :match_requests_on => [:method, :uri, :body], # The http method, URI and body of a request all need to match
        }
        # Don't leave our token lying around in a cassette file.
        config.filter_sensitive_data("<LOCATIONIQ_TOKEN>") do
          ENV["LOCATIONIQ_TOKEN"]
        end
      end
      The last section, beginning with `config.filter_sensitive_data`, tells VCR not to put your token into the cassette file, instead replacing it with the string `"<LOCATIONIQ_TOKEN>"`. That way when the cassettes end up in your git repo, you won't be exposing your secrets to the world. You'll need a separate call to `config.filter_sensitive_data` for every piece of data you want to omit from your cassettes.

      Cassette files usually should be checked into git as they fill a similar role to spec files.

    Tests
      Now you're ready to test your API!!

      We wrap the code where an API call would be made in the VCR.use_cassette block. This will ensure that the code inside the block will use the cassette if it has not already been generated.

      describe "get_location" do
        it "can find a location" do
          VCR.use_cassette("location_find") do
            location = "Seattle"
            response = get_location(location)

            expect(response["Seattle"]).wont_be_nil
            expect(response["Seattle"][:lon]).must_equal "-122.3300624"
            expect(response["Seattle"][:lat]).must_equal "47.6038321"
          end
        end   
        
        it "will raise an exception if the search fails" do
          VCR.use_cassette("location_find") do
            location = ""
            expect {
              response = get_location(location)
            }.must_raise SearchError
          end
        end
      end

    Application Code:
      # lib/location_search
      require "httparty"

      #Starter Code:

      BASE_URL = "https://us1.locationiq.com/v1/search.php"
      KEY = ENV["LOCATIONIQ_TOKEN"]

      class SearchError < StandardError; end

      def get_location(search_term)
        query = {
          q: search_term,
          key: KEY,
          format: "json",
        }
        response = HTTParty.get(BASE_URL, query: query)

        unless response.code == 200
          raise SearchError, "Cannot find #{search_term}"
        end

        return {
                search_term => {
                  lat: response.first["lat"],
                  lon: response.first["lon"],
                },
              }
      end